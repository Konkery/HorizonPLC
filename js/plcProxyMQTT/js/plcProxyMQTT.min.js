class ClassProxyMQTT{constructor(_mqtt,_subs){this._MQTT=_mqtt,this._Subs=_subs||{dm:{sensor:{},actuator:{}}},this._SkipData=!1,this._DataSkipInterval=null,Object.on("all-data-raw-get",this.OnSensorData.bind(this)),this._MQTT.on("connected",this.OnConnected.bind(this)),this._MQTT.on("publish",this.OnPublish.bind(this)),this._MQTT.on("disconnected",this.OnDisconnected.bind(this)),this._MQTT.on("error",this.OnError.bind(this))}OnSensorData(_msg){if(!this._DataSkipInterval||!this._SkipData){const ch_id=_msg.arg[0],topic=this._Subs.dm.sensor[ch_id];"string"==typeof topic&&this._MQTT.connected&&this._MQTT.publish(topic,JSON.stringify(_msg.value[0]))}}OnPublish(pub){const ch_id=Object.keys(this._Subs.dm.actuator).find(_key=>this._Subs.dm.actuator[_key]==pub.topic);"string"==typeof ch_id&&Object.emit("dm-actuator-set",{arg:[ch_id],value:[pub.message]})}OnDisconnected(){H.Logger.Service.Log({service:"MQTT",level:"I",msg:"MQTT disconnected!"});let c=0,interval=setInterval(()=>{if(this._MQTT.connected)clearInterval(interval);else{if(3==++c)return H.Logger.Service.Log("MQTT",H.Logger.Service.LogLevel.INFO,`MQTT failed to reconnect after ${c} retries.`),void clearInterval(interval);H.Logger.Service.Log("MQTT",H.Logger.Service.LogLevel.INFO,"MQTT trying to reconnect.."),this._MQTT.connect()}},5e3)}OnConnected(){H.Logger.Service.Log({service:"MQTT",level:"I",msg:"MQTT connected!"}),this.SetDMSubs()}OnError(_errMsg){H.Logger.Service.Log({service:"MQTT",level:"E",msg:`${_errMsg}`})}SetDMSubs(){if("object"!=typeof this._Subs.dm.actuator)return!1;let actuator_topic_names=Object.keys(this._Subs.dm.actuator).map(_chId=>this._Subs.dm.actuator[_chId]);this._MQTT.subscribe(actuator_topic_names),H.Logger.Service.Log({service:"MQTT",level:"I",msg:`MQTT subscribed on topics ${actuator_topic_names}`})}RemoveSubs(_serviceName,_serviceSubs){if(!this._Subs[_serviceName]||"object"!=typeof _serviceSubs)return!1;_serviceSubs.forEach(chId=>{delete this._Subs[_serviceName][chId]})}Send(_topicName,_data){this._MQTT.publish(_topicName,_data)}SetPubMaxFreq(_freq){return!("number"!=typeof _freq||_freq<0)&&(this._DataSkipInterval=setInterval(()=>{this._SkipData=!this._SkipData},1/_freq*1e3),!0)}}exports=ClassProxyMQTT;